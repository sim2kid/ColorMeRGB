@model IEnumerable<Services.Models.GameModel>;
@{
    ViewBag.Title = "History";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*Created by Gabriel Willemssen*@
<style>
    body {
        background-color: white;
        background-image: linear-gradient(white, skyblue);
        background-attachment: fixed;
        font-family: Tahoma, Verdana, sans-serif;
    }

    .square {
        width: 100%;
        height: 100px;
        border-radius: 5px 5px 0 0;
        display: flex;
        justify-content: center; /* align horizontal */
        align-items: center; /* align vertical */
        flex-wrap: nowrap;
        flex-direction:column;
    }

    p {
        margin: 0;
    }

    .invert {
        color: #EEE;
    }

    .answer {
        height: 200px;
        flex-grow: 1;
        display: flex;
        justify-content: center; /* align horizontal */
        align-items: center; /* align vertical */
        flex-wrap: nowrap;
        flex-direction:column;
    }

    .answer-first {
        border-bottom-left-radius: 5px;
    }

    .answer-last {
        border-bottom-right-radius: 5px;
    }

    .history {
        margin-top: 20px;
        display: flex;
        flex-wrap: nowrap;
        flex-direction: column;
        gap: 50px;
        width: 100%;
    }

    .flex-container {
        flex-direction: column;
        display: flex;
        background-color: 0;
        justify-content: center;
        font-size: 24;

        border-radius: 5px;

        box-shadow: 5px 5px 10px darkred;
        transition: all 1s ease;
        position: relative;
    }

    .flex-container:hover {
        transform: translate(-3px, -3px) scale(1.01);
        box-shadow: 10px 10px 15px darkred;
    }

    .correct:hover {
        box-shadow: 10px 10px 15px darkgreen;
    }

    .answers {
        flex-direction: row;
        display: flex;
        width: 100%;
    }

    .wellRounded {
        border-radius: 5px !important;
    }

    .correct {
        box-shadow: 5px 5px 10px darkgreen;
    }

    .center {
        margin-left: auto;
        margin-right: auto;
        width: max-content;
    }

    .button {
        background-color: deepskyblue;
        border: none;
        color: white;
        padding: 15px 40px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-family: Tahoma, Verdana, sans-serif;
        font-size: 24px;
        cursor: pointer;
        border-radius: 16px;
        transition-duration: 0.4s;
    }

    .button1 {
        background-color: deepskyblue;
        color: white;
        border: 2px solid deepskyblue;
    }

    .button1:hover {
        background-color: white;
        color: deepskyblue;
        border: 2px solid deepskyblue;
    }

    @@media only screen and (max-width: 767px) {
       .flex-container {
          flex-direction: row;
          min-height: 16rem;
       }
       .answer {
            height: 8rem;
       }
       .square {
          height: auto;
          width: 50%;
          flex-grow: 5;
          border-radius: 5px 0 0 5px;
       }
       .answers {
            flex-direction: column;
            width: 50%;
       }
       .answer-first {
            border-bottom-left-radius: 0;
            border-top-right-radius: 5px;
        }
        .break {
            display: none !important;
        }
    }

    .break {
        display: none;
    }

    @@media only screen and (max-width: 992px) {
       .break {
           display: inline;
       }
    }
</style>

<main>
    <div class="history">
        @if (Model.Count() == 0)
        {
            <h1 class="center">No Games Yet?</h1>
            <button class="center button button1" onclick="location.href='@Url.Action("Index","Game")'">Play Now</button>
        }
        @foreach(var game in Model) { // Owen
        <div>
            <h2>@game.Timestamp.ToString("f")</h2>
            <div class="flex-container@(game.hasCorrectAnswer ? " correct" : "")">
                <div class="square@(game.Answers.Count == 0 ? " wellRounded" : string.Empty)@(game.rgb.isDark?" invert":"")" style="background-color: #@game.CorrectAnswer">
                    <p><b>@game.Answers.Count</b> @(game.Answers.Count == 1 ? "Guess" : "Guesses")</p>
                    <p><b>R: </b>@game.rgb.R <b>G: </b>@game.rgb.G <b>B: </b>@game.rgb.B</p>
                </div>
                <div id="answers" class="answers">
                    @{
                        string br = (game.Answers.Count >= 4 ? "<br class='break'>" : "");
                    }
                    @for(int i = 0; i < game.Answers.Count; i++) {
                        var answer = game.Answers[i];
                        string extraClass = ((i==0) ? " answer-first" : string.Empty) + ((i == game.Answers.Count - 1) ? " answer-last" : string.Empty);
                        <div class="answer@(extraClass)@(answer.rgb.isDark?" invert":"")" style="background-color: #@answer.GuessColor">
                            <p>
                                <b>R: </b>@answer.rgb.R @Html.Raw(br)
                                <b>G: </b>@answer.rgb.G @Html.Raw(br)
                                <b>B: </b>@answer.rgb.B</p>
                            @Html.Raw(br)
                            <p>
                                Distance: @Html.Raw(br)
                                <b>@answer.Distance.ToString("0")</b>
                            </p>
                        </div>
                    }
                </div>
            </div>
        </div>
        }
    </div>


</main>