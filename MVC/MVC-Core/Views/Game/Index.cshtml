@model MVC_Core.Models.GameModel
@{
    ViewBag.Title = "Game";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var ran = new Random();
}


@*Created by Gabriel Willemssen*@
<style>
    body {
        background-color: white;
        background-image: linear-gradient(white, skyblue);
        background-attachment: fixed;
        font-family: Tahoma, Verdana, sans-serif;
    }

    .square {
        margin: 10px;
        width: 200px;
        height: 200px;
        background: rgba(84, 105, 243, 1);
        border-radius: 5px;
        flex-shrink: 0;
    }

    .square1 {
        background: rgba(234, 96, 104, 1);
    }

    .square2 {
        background: rgba(234, 96, 104, 1);
    }

    .square3 {
        background: rgba(234, 96, 104, 1);
    }

    .square4 {
        background: rgba(234, 96, 104, 1);
    }

    .square5 {
        background: rgba(234, 96, 104, 1);
    }

    .flex-container {
        flex-direction: row;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        flex-wrap: nowrap;
    }

    .ans-container {
        flex-direction: column;
        display: flex;
        flex-wrap: nowrap;
        justify-content: center;
        align-items: center;
        gap: 10px;
        width: 100%;
        flex-grow: 1;
    }

    .column {
        flex-grow: 1;
    }

    .form-flex {
        flex-direction: row;
        display: flex;
        justify-content: space-around;
        align-items: center;
    }
    [for="R"] {
        margin-left: 0;
    }
    div > label {
        margin: 0 0.5ch 0 1ch;
        flex-grow: 0;
    }
    div > input {
        flex-grow: 1;
    }
    

    /* Phone Size */
    @@media (max-width: 800px) {
        .flex-container {
            flex-direction: column;
            row-gap: 20px;
        }
        #input {
            position: relative;
            flex-direction: column;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
        }
        
    }
    /* Desktop Size */
    @@media (min-width: 800px) {
        #input {
            top: 50%;
            left: 50%;
            transform: translateY(-50%) translateX(calc(calc(21.25ch + 20px) * -2));
            position: fixed;
            flex-direction: column;
            display: flex;
            justify-content: center;
            align-items: center;
            width: max-content;
        }
        .flex-container {
            align-items: flex-start;
        }
        .column {
            width: 50%;
            height: 100vh;
        }
        .ans-container 
        {
            width: 50%;
            min-height: 100vh;
        }
    }


    input[type=number], select {
        width: 10ch;
        padding: 12px 10px;
        margin: 8px auto;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    input[type=submit] {
        width: 42.5ch;
        background-color: deepskyblue;
        color: white;
        padding: 14px 20px;
        margin: 8px 0;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.5s ease, color 0.5s ease;
    }

    input[type=submit]:hover {
        background-color: skyblue;
        color: #666;
    }

    .border {
        width: max-content;
        border-radius: 5px;
        background-color: #f2f2f2;
        padding: 20px;
        font-family: Tahoma, Verdana, sans-serif;
    }
</style>
<script>
const clamp = (num, min, max) => Math.min(Math.max(num, min), max);

function ensureInBounds(id) 
{
    let input = document.getElementById(id);
    input.value = clamp(input.value, 0, 255);
}
</script>

<body>


    <div class="flex-container">
        <div class="column">
            <div id="input">
                <div class="square"></div>
                <div class="border">
                    @using (Html.BeginForm()) { // Owen
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-flex">
                            @Html.LabelFor(model => model.R)
                            <input type="number" min="0" max="255" value="@ran.Next(0,256)" 
                            onchange="ensureInBounds('rValue')" id="rValue" name="R">
                            @Html.ValidationMessageFor(model => model.R, "", new { @class = "text-danger" })

                            @Html.LabelFor(model => model.G)
                            <input type="number" min="0" max="255" value="@ran.Next(0,256)" 
                            onchange="ensureInBounds('gValue')" id="gValue" name="G">
                            @Html.ValidationMessageFor(model => model.G, "", new { @class = "text-danger" })

                            @Html.LabelFor(model => model.B)
                            <input type="number" min="0" max="255" value="@ran.Next(0,256)" 
                            onchange="ensureInBounds('bValue')" id="bValue" name="B">
                            @Html.ValidationMessageFor(model => model.B, "", new { @class = "text-danger" })
                            <br>
                         </div>
                        <input type="submit" value="Guess!">
                    }
                </div>
            </div>
        </div>
        <div class="ans-container">
            <div class="square square1"></div>
        </div>
    </div>


</body>
